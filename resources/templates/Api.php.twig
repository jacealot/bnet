<?php

declare(strict_types=1);

/*
 * This file is part of boo/bnet.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Boo\BattleNet\Apis\{{ namespace }};

use Boo\BattleNet\Apis\AbstractApi;
use Psr\Http\Message\RequestInterface;

final class {{ className }} extends AbstractApi
{
{% for url, endpoint in endpoints %}
    public function {{ endpoint.method }}({{ endpoint.arguments }}): RequestInterface
    {
{% if endpoint.unavailable is not empty %}
        $this->preventRegionUsage([
{% for region in endpoint.unavailable %}
            '{{ region }}',
{% endfor %}
        ]);

{% endif %}
{% if endpoint.overrides is not empty %}
        $url = {{ endpoint.url|raw }};

{% for override in endpoint.overrides %}
        if ('{{ override.region }}' === $this->getRegionName()) {
            $url = {{  override.url|raw }};
        }

{% endfor %}
{% endif %}
{% if endpoint.constants is empty and endpoint.queryArgs is empty %}
        return $this->createRequest({{  endpoint.verb|raw }}, {% if endpoint.overrides is not empty %}$url{% else %}{{ endpoint.url|raw }}{% endif %});
{%  else %}
        return $this->createRequest({{  endpoint.verb|raw }}, {% if endpoint.overrides is not empty %}$url{% else %}{{ endpoint.url|raw }}{% endif %}, [
{% for argument in endpoint.constants %}
            '{{ argument.name }}' => '{{ argument.value }}',
{% endfor %}
{% for argument in endpoint.queryArgs %}
{% if argument.docType is same as("string[]") %}
            '{{ argument.name }}' => implode(',', ${{ argument.variable }}),
{% else %}
            '{{ argument.name }}' => ${{ argument.variable }},
{% endif %}
{% endfor %}
        ]);
{% endif %}
    }

{% endfor %}
    /**
     * {@inheritdoc}
     */
    protected function getRestrictedRegions(): array
    {
{% if unavailable is not empty %}
        return [
{% for region in unavailable %}
            '{{ region }}',
{% endfor %}
        ];
{% else %}
        return [];
{% endif %}
    }
}
