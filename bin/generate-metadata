#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the Battle.net API Client package.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

function to_camel_case(string $string): string
{
    return str_replace(' ', '', ucwords(strtolower($string)));
}

function get_fqcn(string $api, string $category, string $name, string $method): string
{
    $api = preg_replace('/[^a-z0-9]/i', ' ', $api);
    $api = to_camel_case($api);
    $category = str_ireplace('API', '', $category);
    $category = to_camel_case($category);
    $name = str_replace(['(', ')'], '', $name);
    $name = preg_replace('/GET|POST/i', '', $name);
    $name = preg_replace('/([a-z])([A-Z])/', '$1 $2', $name);
    $name = to_camel_case($method.' '.$name);

    return $api.'\\'.$category.'\\'.$name;
}

set_error_handler(function ($severity, $message, $file, $line) {
    if ($severity & error_reporting()) {
        throw new ErrorException($message, 0, $severity, $file, $line);
    }
});

chdir(dirname(__DIR__));

require_once 'vendor/autoload.php';

if (!file_exists('resources/apis')) {
    fwrite(STDERR, 'Unable to load API definitions');
    exit(1);
}

$docFiles = array_diff(scandir('resources/apis', 1), ['..', '.']);
$endpoints = [];

foreach ($docFiles as $docFile) {
    $apiDocs = json_decode(file_get_contents('resources/apis/'.$docFile));

    foreach ($apiDocs->resources as $category => $resourceData) {
        foreach ($resourceData->methods as $endpoint => $endpointData) {
            $fqcn = get_fqcn($apiDocs->name, $category, $endpoint, $endpointData->httpMethod);

            if (array_key_exists($fqcn, $endpoints)) {
                fwrite(STDERR, 'Duplicated FQCDN "'.$fqcn.'" encountered');
                exit(1);
            }

            $path = $endpointData->path;
            $header = [];
            $query = [];
            $replace = [];
            foreach ((array) $endpointData->parameters as $parameter => $parameterData) {
                // Fix common errors in Blizzard's API docs.
                if (!isset($parameterData->location) || ($parameterData->location === 'pathReplace' && !stripos($path, $parameter))) {
                    $parameterData->location = 'query';
                }

                $definition = [
                    'default' => $parameterData->default ?? null,
                    'description' => $parameterData->description,
                    'name' => lcfirst(to_camel_case(preg_replace(['/([a-z])([A-Z])/', '/[^a-z0-9]/i'], ['$1 $2', ' '], $parameter))),
                    'required' => $parameterData->required,
                    'type' => $parameterData->type,
                ];

                if ($parameterData->location === 'query') {
                    // These parameters are irrelevant to us.
                    if (in_array($parameter, [
                        'callback',
                        'jsonp',
                        'locale',
                        'namespace',
                    ])) {
                        continue;
                    }

                    $query[] = $definition;
                } elseif ($parameterData->location === 'pathReplace') {
                    $path = str_ireplace($parameter, '%'.(count($replace) + 1).'$s', $path);
                    $replace[] = $definition;
                } elseif ($parameterData->location === 'header') {
                    $header[] = $definition;
                } else {
                    fwrite(STDERR, 'Unknown parameter location "'.$parameterData->location.'" encountered');
                    exit(1);
                }
            }

            $endpoints[$fqcn] = [
                'header' => $header,
                'method' => $endpointData->httpMethod,
                'path' => $path,
                'query' => $query,
                'replace' => $replace,
            ];
        }
    }
}

file_put_contents('resources/metadata.json', json_encode($endpoints, JSON_PRETTY_PRINT));
