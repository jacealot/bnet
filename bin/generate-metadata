#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the Battle.net API Client package.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

function to_camel_case(string $string): string
{
    return str_replace(' ', '', ucwords(strtolower($string)));
}

function get_method_from_name_and_verb(string $name, string $verb): string
{
    if (0 === strpos($name, 'get')) {
        $name = substr($name, 3);
    }

    if (false === strpos($name, ' ')) {
        $name = preg_replace('/(.)(?=[A-Z])/u', '$1 ', $name);
    }

    return strtolower($verb).to_camel_case($name);
}

function get_fqcn(string $api, string $category, string $name, string $method): string
{
    $api = preg_replace('/[^a-z0-9]/i', ' ', $api);
    $api = to_camel_case($api);
    $category = str_ireplace('API', '', $category);
    $category = to_camel_case($category);
    $name = str_replace(['(', ')'], '', $name);
    $name = preg_replace('/GET|POST/i', '', $name);
    $name = preg_replace('/([a-z])([A-Z])/', '$1 $2', $name);
    $name = to_camel_case($method.' '.$name);

    return $api.'\\'.$category.'\\'.$name;
}

function get_class_from_name(string $name): string
{
    return to_camel_case($name).'Endpoint';
}

function normalize_parameters(array $parameters, string $authType): array
{
    static $unwanted = [
        'callback',
        'jsonp',
        'locale',
    ];

    $parameters = array_filter($parameters, function (stdClass $parameter) use ($unwanted): bool {
        return false === in_array($parameter->name, $unwanted, true);
    });

    if ('oauth2' === $authType) {
        $parameters[] = (object) [
            'kind' => 'query',
            'name' => 'access_token',
            'value' => '',
            'type' => 'string',
            'description' => '',
        ];
    }

    static $valueOverrides = [
        // Values
        '8056' => '80353',
        'achievements,challenge' => '',
        'apprentice-flamberge' => 'flawless-amethyst',
        'blacksmith' => 'jeweler',
        // Names
        '{account}' => 'StingDuck-2452',
        '{heroId}' => '111436732',
        ':characterName' => 'Jyggen',
        ':guildName' => 'Malaxnytt',
        ':realm' => 'draenor',
        // Descriptions
        'The ID of the ladder to retrieve.' => '206822',
        'The ID of the profile to retrieve.' => '5179818',
        'The name of the profile to retrieve.' => 'soul',
    ];

    return array_reduce(
        $parameters,
        function (array $parameters, stdClass $parameter) use ($valueOverrides): array {
            if (array_key_exists($parameter->value, $valueOverrides)) {
                $parameter->value = $valueOverrides[$parameter->value];
            }

            if (array_key_exists($parameter->name, $valueOverrides)) {
                $parameter->value = $valueOverrides[$parameter->name];
            }

            if (array_key_exists($parameter->description, $valueOverrides)) {
                $parameter->value = $valueOverrides[$parameter->description];
            }

            $parameter->isConstant = false;

            if ('fields' === $parameter->name) {
                $parameter->kind = 'query';
                $parameter->type = 'commaSeparatedStrings';
                $parameter->isConstant = '' !== $parameter->value;
            }

            $parameters[] = $parameter;

            return $parameters;
        },
        []
    );
}

set_error_handler(function ($severity, $message, $file, $line) {
    if ($severity & error_reporting()) {
        throw new ErrorException($message, 0, $severity, $file, $line);
    }
});

chdir(dirname(__DIR__));

require_once 'vendor/autoload.php';

if (!file_exists('resources/apis')) {
    fwrite(STDERR, 'Unable to load API definitions');
    exit(1);
}

$docFiles = array_diff(scandir('resources/apis', 1), ['..', '.']);
$endpoints = [];

foreach ($docFiles as $docFile) {
    $apiDocs = json_decode(file_get_contents('resources/apis/'.$docFile));

    foreach ($apiDocs->resources as $category => $resourceData) {
        foreach ($resourceData->methods as $endpoint => $endpointData) {
            $fqcn = get_fqcn($apiDocs->name, $category, $endpoint, $endpointData->httpMethod);

            if (array_key_exists($fqcn, $endpoints)) {
                fwrite(STDERR, 'Duplicated FQCDN "'.$fqcn.'" encountered');
                exit(1);
            }

            $path = $endpointData->path;
            $parameters = [];
            foreach ((array) $endpointData->parameters as $parameter => $parameterData) {
                #dd($parameterData, $parameter);

                if (!isset($parameterData->location)) {
                    continue;
                }

                if ($parameterData->location === 'query' && in_array($parameter, [
                    'callback',
                    'jsonp',
                    'locale',
                    'namespace',
                ])) {
                    continue;
                }

                if ($parameterData->location === 'pathReplace') {

                }

                $parameters[] = [
                    'name' => $parameter,
                ];
            }

            #dd($parameters);

            $endpoints[$fqcn] = [
                'method' => $endpointData->httpMethod,
                'path' => $path,
                'parameters' => $parameters,
            ];

            continue;

            foreach ($methodData->parameters as $parameter => $parameterData) {
                if (in_array($parameter, ['locale', 'namespace'])) {
                    continue;
                }

                $parameters[] = [
                    'default' => $parameterData->default ?? null,
                    'description' => $parameterData->description,
                    'name' => $parameter,
                    'location' => $parameterData->location ?? null,
                    'required' => $parameterData->required,
                    'type' => $parameterData->type,
                ];
            }

            $apis[$namespace][$className][] = [
                'description' => $methodData->description,
                'name' => $method,
                'parameters' => $parameters,
                'path' => $methodData->path,
                'verb' => $methodData->httpMethod,
            ];
        }
    }
}

file_put_contents('resources/metadata.json', json_encode($endpoints, JSON_PRETTY_PRINT));
